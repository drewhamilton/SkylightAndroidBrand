buildscript {
    ext.versions = [
        kotlin: '1.6.10',
    ]
    ext.deps = [
        appCompat: 'androidx.appcompat:appcompat:1.4.0',
        constraintLayout: 'androidx.constraintlayout:constraintlayout:2.0.1',
        coreKtx: 'androidx.core:core-ktx:1.7.0',
        deferredResources: 'com.backbase.oss.deferredresources:deferred-resources:1.6.0',
        espresso: 'androidx.test.espresso:espresso-intents:3.3.0',
        junit: 'junit:junit:4.13.2',
        junitExt: 'androidx.test.ext:junit:1.1.2',
        materialComponents: 'com.google.android.material:material:1.2.1',
        testRules: 'androidx.test:rules:1.3.0',
        testRunner: 'androidx.test:runner:1.3.0',
    ]
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.kotlinx:binary-compatibility-validator:0.8.0"
    }
}

ext.projectVersions = [
    compileSdk: 31,
    minSdk: 21,
    targetSdk: 30,
]

apply plugin: 'binary-compatibility-validator'
apiValidation {
    ignoredProjects += ['xml-theme-demo']
}

ext {
    keystore = project.hasProperty('personalKeystore') ? personalKeystore : 'x'
    keystorePassword = project.hasProperty('personalKeystorePassword') ? personalKeystorePassword : 'x'
    keyAlias = project.hasProperty('personalKeyAlias') ? personalKeyAlias : 'x'
    keyPassword = project.hasProperty('personalKeyPassword') ? personalKeyPassword : 'x'
}

allprojects { project ->
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    project.configurations.all {
        // Don't cache snapshots:
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    //noinspection UnnecessaryQualifiedReference
    project.plugins.withType(com.android.build.gradle.LibraryPlugin) {
        project.android.libraryVariants.all { variant ->
            variant.generateBuildConfigProvider.get().enabled = false
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
